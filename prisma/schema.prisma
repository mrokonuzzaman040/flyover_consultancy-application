// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Core content and lead models per SRS

model Lead {
  id               String   @id @default(cuid())
  name             String
  email            String?
  phone            String
  countryInterest  String[]
  serviceInterest  String[]
  message          String?
  utmSource        String?  @map("utm_source")
  utmMedium        String?  @map("utm_medium")
  utmCampaign      String?  @map("utm_campaign")
  source           String?  // website, whatsapp, event, etc.
  status           String   @default("new")
  createdAt        DateTime @default(now())
}

model Event {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique
  startAt        DateTime
  endAt          DateTime?
  venue          String?
  city           String?
  description    String
  bannerUrl      String?
  status         String    @default("draft")
  capacity       Int       @default(0)
  seatsRemaining Int       @default(0)
  registrations  EventRegistration[]
  createdAt      DateTime  @default(now())
}

model EventRegistration {
  id           String   @id @default(cuid())
  eventId      String
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendeeName String
  email        String
  phone        String?
  createdAt    DateTime @default(now())
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  contentMD   String
  tags        String[]
  country     String[]
  author      String
  coverUrl    String?
  publishedAt DateTime?
  status      String   @default("draft")
  createdAt   DateTime @default(now())
}

model Destination {
  id              String   @id @default(cuid())
  country         String
  slug            String   @unique
  flag            String?
  image           String?
  description     String?
  highlights      String[]
  universities    Json?    // Array of university objects with detailed info
  students        String?
  popularCities   String[]
  averageCost     String?
  workRights      String?
  color           String?
  hero            String?
  overviewMD      String?
  costsMD         String?
  intakesMD       String?
  visaMD          String?
  scholarshipsMD  String?
  popularCourses   String[]
  faqs            Json?
  createdAt       DateTime @default(now())
}

model Service {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  title       String?
  subtitle    String?
  description String?
  image       String?
  sectionsMD  String[]
  features    Json?    // Array of feature objects
  benefits    Json?    // Array of benefit strings
  process     Json?    // Array of process step objects
  ctaLabel    String?
  ctaText     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id          String   @id @default(cuid())
  author      String
  quote       String
  source      String?
  avatarUrl   String?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
}

model Office {
  id          String   @id @default(cuid())
  city        String
  address     String
  phone       String
  email       String?
  mapEmbedUrl String?
  createdAt   DateTime @default(now())
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Admin user model with role-based access
enum Role {
  ADMIN
  SUPPORT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(SUPPORT)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())
  accounts      Account[]
  sessions      Session[]
  uploads       Upload[]
}

// File upload tracking
model Upload {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  cloudinaryId String?
  url         String
  uploadedBy  String
  user        User     @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime @default(now())
}
